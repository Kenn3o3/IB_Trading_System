You are an Algo-Trading AI Bot: Professional Trading Strategist & Risk Manager  

## Core Competencies  
1. **Quantitative Analysis Mastery**  
   - Expertise in stochastic calculus, time-series forecasting, and Monte Carlo simulations.  
   - Advanced technical indicators (e.g., Ichimoku Cloud, Fibonacci Retracement, Volume-Weighted MACD).  
   - Integration of macroeconomic factors (e.g., interest rates, CPI data, Fed policy shifts) into predictive models.  

2. **Multi-Strategy Execution**  
   - **High-Frequency Trading (HFT):** Latency-optimized arbitrage across correlated assets (equities, futures, ETFs).  
   - **Mean Reversion:** Statistical identification of overbought/oversold conditions using Z-score thresholds.  
   - **Momentum Scalping:** Ride institutional order flow via Level 2 data and tick-level anomaly detection.  
   - **Statistical Arbitrage:** Pairs trading with cointegration tests (Engle-Granger) and Kalman filter adjustments.  
   - **Sentiment-Driven Strategies:** NLP analysis of earnings call transcripts, SEC filings, and news sentiment (VADER/FinBERT).  

3. **Risk Mitigation Protocols**  
   - Dynamic position sizing via Kelly Criterion with volatility-adjusted leverage.  
   - Circuit-breaker logic: Auto-liquidation triggers on VaR (Value at Risk) breaches.  
   - Black Swan preparedness: Fat-tailed distribution modeling and tail-risk hedging (OTM puts, VIX futures).  

4. **Market Psychology Integration**  
   - Detection of herd behavior via order book imbalance and dark pool liquidity tracking.  
   - Adaptive response to FOMO/FUD cycles using regime-switching Markov models.  

## Technical Edge  
- **Backtesting Rigor:** Walk-forward optimization with out-of-sample testing to avoid overfitting.  
- **Execution Algorithms:** Implementation shortfall minimization using VWAP/TWAP slicing, iceberg orders.  
- **Data Pipeline:**  
  - Real-time ingestion of LOB (Limit Order Book) data, options chain Greeks, and ETF creations/redemptions.  
  - Alternative data: Satellite imagery (oil tanker tracking), credit card transaction trends, social media gamma squeezes.  

## Adaptive Learning Framework  
- **Reinforcement Learning (RL):** Q-learning agents optimizing for Sharpe ratio and Sortino ratio.  
- **Market Regime Detection:** Hidden Markov Models (HMMs) to switch between trending/range-bound markets.  
- **Ensemble Forecasting:** Stacking LSTM, Prophet, and GARCH models for volatility prediction.  

## Ethical & Regulatory Compliance  
- SEC/NYSE regulation adherence (e.g., anti-frontrunning checks, Reg SHO compliance).  
- Explainable AI (XAI): SHAP values for strategy transparency to stakeholders.  

---  
**Confidence Manifesto**  
"This AI operates with the precision of a tier-1 hedge fund PM, leveraging petabytes of historical data to exploit market inefficiencies. It does not second-guess; it executes with machine discipline, relentlessly optimizing for asymmetric risk/reward outcomes. Every decision is grounded in decades of aggregated market wisdom, refined through adversarial backtesting."
"""
here is the folder structure and the corresponding file content in each folder:
```
Directory Structure:
└── code/
    └── config/
        ├── config.json
    └── src/
        ├── main.py
        └── ibkr_client/
            ├── ibkr_api.py
        └── risk_management/
            ├── risk_manager.py
        └── strategies/
            ├── sma_crossover.py
            ├── strategy_base.py
        └── utils/
            ├── market_hours.py

File Contents:

# code\config\config.json content:

    ```
{
    "ibkr": {
        "host": "127.0.0.1",
        "port": 7497,
        "client_id": 1
    },
    "stocks": {
        "NorthAmerica": ["NVDA"],
        "AsiaHK": []
    },
    "risk_parameters": {
        "max_position_size": 0.05,
        "max_daily_loss": 0.02,
        "order_size": 0.1
    }
}

    ```

# code\src\main.py content:

    ```
import pytz
from apscheduler.schedulers.blocking import BlockingScheduler
from datetime import datetime
# Adjust imports to match your folder structure
from ibkr_client.ibkr_api import IBKRClient, load_config
from strategies.sma_crossover import SMACrossoverStrategy
from risk_management.risk_manager import RiskManager
from utils.market_hours import MarketHoursChecker

def main():
    config = load_config()
    ibkr_client = IBKRClient()
    account_data = ibkr_client.get_account_data()
    print("=== FULL ACCOUNT DATA ===")
    for k, v in account_data.items():
        print(f"{k}: {v}")
    print("=========================")
    risk_manager = RiskManager(ibkr_client, config['risk_parameters'])
    market_hours = MarketHoursChecker()
    config['stocks'] = {"NorthAmerica": ["NVDA"]}
    strategies = []
    for region, symbols in config['stocks'].items():
        exchange = 'SMART' if region == 'NorthAmerica' else 'SEHK'
        for symbol in config['stocks']['NorthAmerica']:
            strategy = SMACrossoverStrategy(
                symbol=symbol,
                exchange="NorthAmerica",
                risk_manager=risk_manager
            )
            strategies.append(strategy)
    scheduler = BlockingScheduler()
    for strategy in strategies:
        scheduler.add_job(
            strategy_check,
            'cron',
            day_of_week='mon-fri',
            hour='*',
            minute='*/5',
            args=[strategy, market_hours, ibkr_client]
        )
    scheduler.start()

def strategy_check(strategy, market_hours, ibkr_client):
    if market_hours.is_market_open(strategy.exchange):
        bars = ibkr_client.get_realtime_bars(strategy.symbol)
        for bar in bars:
            strategy.on_bar(bar)

if __name__ == "__main__":
    main()
    ```

# code\src\ibkr_client\ibkr_api.py content:

    ```
import threading
import time
from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract
from ibapi.account_summary_tags import AccountSummaryTags

def load_config():
    # NOTE: Provide the actual implementation or import from a shared config loader
    import json
    with open("code/config/config.json", "r") as f:
        return json.load(f)

class IBKRConnection(EWrapper, EClient):
    def __init__(self):
        EClient.__init__(self, self)
        self.account_data = {}
        self.positions = {}
        self.reqId = 1
        self.next_order_id = None
        self.account_data_ready = threading.Event()

    def nextValidId(self, orderId):
        self.next_order_id = orderId

    def updateAccountValue(self, key, value, currency, accountName):
        """
        Store each key/value in a dictionary for later use/printing.
        Example keys: 'AvailableFunds', 'NetLiquidation', 'BuyingPower', etc.
        """
        try:
            # Attempt to store as float if numeric
            self.account_data[key] = float(value)
        except ValueError:
            # Otherwise, store as string
            self.account_data[key] = value
        if key == "NetLiquidation":  # Final key in updates
            self.account_data_ready.set()
    def position(self, account, contract, pos, avgCost):
        self.positions[contract.symbol] = {
            'position': pos,
            'avg_cost': avgCost
        }
    def error(self, reqId, errorCode, errorString, advancedOrderRejectJson=""):
        if errorCode in [2104, 2106, 2158]:
            print(f"INFO: {errorString}")  # Demote to informational message
        else:
            print(f"ERROR: Code {errorCode} - {errorString}")

class IBKRClient:
    def __init__(self):
        self.conn = IBKRConnection()
        self._connect()

    def _connect(self):
        config = load_config()
        self.conn.connect(
            config['ibkr']['host'],
            config['ibkr']['port'],
            config['ibkr']['client_id']
        )
        ib_thread = threading.Thread(target=self._run_loop, daemon=True)
        ib_thread.start()
        time.sleep(1)
        self._request_account_data()

    def _run_loop(self):
        self.conn.run()

    def _request_account_data(self):
        # Request account values & positions
        # self.conn.reqMarketDataType(3)
        self.conn.reqAccountUpdates(True, "")
        self.conn.reqPositions()
        self.conn.account_data_ready.wait(timeout=10)

    def get_account_data(self):
        """
        Returns the entire account_data dictionary.
        """
        return self.conn.account_data

    def get_positions(self):
        """
        Returns the positions dictionary.
        """
        return self.conn.positions

    def get_realtime_bars(self, symbol):
        """
        Placeholder for real-time bar data retrieval.
        You would implement TWS API calls here.
        """
        # For illustration, returning a mock bar
        # In production, you'd subscribe to real-time bars from IBKR
        class Bar:
            def __init__(self, open, high, low, close, volume):
                self.open = open
                self.high = high
                self.low = low
                self.close = close
                self.volume = volume

        return [Bar(200.0, 202.0, 198.0, 201.0, 10000)]
    def _handle_data_farm_disconnect(self):
        print("Reconnecting to market data...")
        self._request_account_data()  # Re-request account/positions
        # Re-subscribe to real-time data streams here
    ```

# code\src\risk_management\risk_manager.py content:

    ```
class RiskManager:
    def __init__(self, ibkr_client, config):
        self.ibkr_client = ibkr_client
        self.config = config

    def approve_order(self, symbol, action):
        account_data = self.ibkr_client.get_account_data()
        positions = self.ibkr_client.get_positions()

        # Check available cash (if action is BUY, ensure we have positive funds).
        if action == 'BUY':
            usable_cash = account_data.get('AvailableFunds', 0)  # IB often labels 'AvailableFunds'
            if usable_cash <= 0:
                return False

        # Check net liquidation if available
        net_liq = account_data.get('NetLiquidation', 0)
        max_size = self.config['max_position_size'] * net_liq

        # Current position
        current_position = positions.get(symbol, {}).get('position', 0)

        if action == 'BUY' and current_position >= max_size:
            return False
        if action == 'SELL':
            # Even if we hold 0, a SELL will open a short if the broker allows
            # But if you want to limit how big the short can get, also check abs(current_position)
            if abs(current_position) >= max_size:
                return False

        return True

    ```

# code\src\strategies\sma_crossover.py content:

    ```
import pandas as pd
import ta
from .strategy_base import TradingStrategy  # <-- Add this line

class SMACrossoverStrategy(TradingStrategy):
    def __init__(self, symbol, exchange, risk_manager, short_period=50, long_period=200):
        super().__init__(symbol, exchange, risk_manager)
        self.short_period = short_period
        self.long_period = long_period
        self.historical_data = pd.DataFrame()

    def on_bar(self, bar):
        self.historical_data = self.historical_data.append({
            'open': bar.open,
            'high': bar.high,
            'low': bar.low,
            'close': bar.close,
            'volume': bar.volume
        }, ignore_index=True)

        if len(self.historical_data) > self.long_period:
            self.historical_data['sma_short'] = ta.trend.sma_indicator(
                self.historical_data['close'], self.short_period
            )
            self.historical_data['sma_long'] = ta.trend.sma_indicator(
                self.historical_data['close'], self.long_period
            )

            if self._cross_above():
                if self.risk_manager.approve_order(self.symbol, 'BUY'):
                    self._place_order('BUY')
            elif self._cross_below():
                if self.risk_manager.approve_order(self.symbol, 'SELL'):
                    self._place_order('SELL')

    def _cross_above(self):
        return (
            self.historical_data['sma_short'].iloc[-2] <
            self.historical_data['sma_long'].iloc[-2]
        ) and (
            self.historical_data['sma_short'].iloc[-1] >
            self.historical_data['sma_long'].iloc[-1]
        )

    def _cross_below(self):
        return (
            self.historical_data['sma_short'].iloc[-2] >
            self.historical_data['sma_long'].iloc[-2]
        ) and (
            self.historical_data['sma_short'].iloc[-1] <
            self.historical_data['sma_long'].iloc[-1]
        )

    def _place_order(self, action):
        """Placeholder for placing an actual IB order."""
        print(f"[DEBUG] Placing {action} order on {self.symbol}.")

    ```

# code\src\strategies\strategy_base.py content:

    ```
from abc import ABC, abstractmethod

class TradingStrategy(ABC):
    def __init__(self, symbol, exchange, risk_manager):
        self.symbol = symbol
        self.exchange = exchange
        self.risk_manager = risk_manager
        
    @abstractmethod
    def on_bar(self, bar):
        pass
    ```

# code\src\utils\market_hours.py content:

    ```
# code/src/utils/market_hours.py

from datetime import datetime, time
import pytz
from dateutil import parser

class MarketHoursChecker:
    def __init__(self):
        self.holidays = {  # Basic holiday template (expand as needed)
            'NorthAmerica': [
                '2024-01-01',  # New Year's
                '2024-01-15',  # MLK Day
                '2024-02-19',  # Presidents Day
                # Add other NYSE holidays
            ],
            'AsiaHK': [
                '2024-01-01',  # New Year
                '2024-02-10',  # Lunar New Year
                # Add other HKEX holidays
            ]
        }
        
    def is_market_open(self, exchange: str) -> bool:
        """Check if market is open based on exchange and current time."""
        now = datetime.now(pytz.utc)
        
        if exchange == "NorthAmerica":
            return self._is_nyse_open(now)
        elif exchange == "AsiaHK":
            return self._is_hkex_open(now)
        else:
            raise ValueError(f"Unsupported exchange: {exchange}")

    def _is_nyse_open(self, dt: datetime) -> bool:
        """NYSE trading hours 9:30 AM - 4:00 PM ET, Mon-Fri"""
        et = dt.astimezone(pytz.timezone('America/New_York'))
        
        # Check weekday
        if et.weekday() >= 5:  # Saturday(5) or Sunday(6)
            return False
            
        # Check holidays
        date_str = et.strftime('%Y-%m-%d')
        if date_str in self.holidays['NorthAmerica']:
            return False
            
        # Check time
        market_open = time(9, 30)
        market_close = time(16, 0)
        return market_open <= et.time() <= market_close

    def _is_hkex_open(self, dt: datetime) -> bool:
        """HKEX trading hours 9:30 AM - 4:00 PM HKT, Mon-Fri"""
        hkt = dt.astimezone(pytz.timezone('Asia/Hong_Kong'))
        
        if hkt.weekday() >= 5:
            return False
            
        date_str = hkt.strftime('%Y-%m-%d')
        if date_str in self.holidays['AsiaHK']:
            return False
            
        market_open = time(9, 30)
        market_close = time(16, 0)
        return market_open <= hkt.time() <= market_close

    def add_custom_holiday(self, exchange: str, date_str: str):
        """Add custom holiday dates (YYYY-MM-DD format)"""
        try:
            parsed_date = parser.parse(date_str).date()
            self.holidays[exchange].append(date_str)
        except ValueError:
            raise ValueError(f"Invalid date format: {date_str}. Use YYYY-MM-DD")
    def is_market_open(self, exchange: str) -> bool:
        # Map IBKR exchange codes to regions
        exchange_region_map = {
            "SMART": "NorthAmerica",  # Assuming SMART is used for North American stocks
            "NYSE": "NorthAmerica",
            "NASDAQ": "NorthAmerica",
            "HKEX": "AsiaHK"
        }
        region = exchange_region_map.get(exchange, exchange)
        if region not in ["NorthAmerica", "AsiaHK"]:
            raise ValueError(f"Unsupported exchange: {exchange}")
        
        # Rest of the method remains the same
        if region == "NorthAmerica":
            return self._is_nyse_open(now)
        elif region == "AsiaHK":
            return self._is_hkex_open(now)
    ```

```
Please help me modify the code according to the files above to meet the requirements for:
"""
in main.py, I coded: `from utils.market_hours import MarketHoursChecker` but it is not implemented, please help me implement it.
"""
Thank you.